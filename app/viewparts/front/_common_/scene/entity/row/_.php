/*

	取引先レコード

*/
//------------------------------------------------------------------------------
//	properties
//------------------------------------------------------------------------------
<props>
{
	row : null,


	//	このviewpartが作成された瞬間は、
	//	entity_id : 1,
	//	name : 'test',
	//	user_id : 1, ...
	//	のように値が設定される。
	//	なのでinitの時のみ、そのentity_idを使用してdbcとバインドする
	//	その後は、rowの値を使用する
}
</props>

//------------------------------------------------------------------------------
//	html part
//------------------------------------------------------------------------------
<template>
 <tr class="row clickable border" ref="row">
  <td>{{ row.name ? row.name : '-' }}</td>
  <td class="min">{{ row.user_name ? row.user_name : '-' }}</td>
  <td class="min">{{ row.updated_at ? change_unixts_to_ymd(row.updated_at) : '-' }}</td>
 </tr>
</template>

//------------------------------------------------------------------------------
//	style
//------------------------------------------------------------------------------
<style>

</style>

//------------------------------------------------------------------------------
//	init
//------------------------------------------------------------------------------
<init>
{
	//	dbcに登録されているentitiesデータ内、entity_idが一致するrowを
	//	自身のrowにバインドする
	let entity_id = self.prop('entity_id');
	dbc.bind("entities", entity_id, self, "row");
}
</init>

//------------------------------------------------------------------------------
//	ready
//------------------------------------------------------------------------------
<ready>
{

}
</ready>

//------------------------------------------------------------------------------
//	watch
//------------------------------------------------------------------------------
<watch>
{
}
</watch>

//------------------------------------------------------------------------------
//	method
//------------------------------------------------------------------------------
<method>
{
	//	復元パス取得
	scene_path()
	{

	},

	//	タイトル取得
	scene_title()
	{
		return 'Todo';
	},

	//	休止時
	scene_suspend()
	{
	},

	//	再開時
	scene_resume()
	{
	},

	//	破棄時
	scene_destroy()
	{
	}
}
</method>

//------------------------------------------------------------------------------
//	recv
//------------------------------------------------------------------------------
<recv>
{
}
</recv>
